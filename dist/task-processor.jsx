// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, require, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]};
	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullpath, state, id) {
		var name, dir, exports, module, fn, found, i, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullpath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullpath, 1, id);
			}
			return resolve(scope, tree, 'index', fullpath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullpath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	require = function (scope, tree, fullpath, id) {
		var name, path = fullpath, t = fullpath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) throw notFoundError(fullpath);
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullpath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return require(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"JSON": {
		"index.js": function (exports, module, require) {
			/**
			 * JSON
			 * Date: 05.02.14
			 * Vitaliy V. Makeev (w.makeev@gmail.com)
			 */

			var JSON;if(!JSON){JSON={}}(function(){function f(n){return n<10?"0"+n:n}if(typeof Date.prototype.toJSON!=="function"){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf()}}var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==="string"?c:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+string+'"'}function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==="object"&&typeof value.toJSON==="function"){value=value.toJSON(key)}if(typeof rep==="function"){value=rep.call(holder,key,value)}switch(typeof value){case"string":return quote(value);case"number":return isFinite(value)?String(value):"null";case"boolean":case"null":return String(value);case"object":if(!value){return"null"}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==="[object Array]"){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||"null"}v=partial.length===0?"[]":gap?"[\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"]":"["+partial.join(",")+"]";gap=mind;return v}if(rep&&typeof rep==="object"){length=rep.length;for(i=0;i<length;i+=1){if(typeof rep[i]==="string"){k=rep[i];v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v)}}}}else{for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?": ":":")+v)}}}}v=partial.length===0?"{}":gap?"{\n"+gap+partial.join(",\n"+gap)+"\n"+mind+"}":"{"+partial.join(",")+"}";gap=mind;return v}}if(typeof JSON.stringify!=="function"){JSON.stringify=function(value,replacer,space){var i;gap="";indent="";if(typeof space==="number"){for(i=0;i<space;i+=1){indent+=" "}}else{if(typeof space==="string"){indent=space}}rep=replacer;if(replacer&&typeof replacer!=="function"&&(typeof replacer!=="object"||typeof replacer.length!=="number")){throw new Error("JSON.stringify")}return str("",{"":value})}}if(typeof JSON.parse!=="function"){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==="object"){for(k in value){if(Object.prototype.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v}else{delete value[k]}}}}return reviver.call(holder,key,value)}text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})}if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof reviver==="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")}}}());

			module.exports = JSON;
		}
	},
	"logger": {
		"index.js": function (exports, module, require) {
			/**
			 * index
			 * Date: 07.02.14
			 * Vitaliy V. Makeev (w.makeev@gmail.com)
			 */

			module.exports = {

			    debug: function (msg) {
			        $.write('DEBUG: ');
			        $.writeln(msg);
			    }

			};
		}
	},
	"src": {
		"main.js": function (exports, module, require) {
			/**
			 * main
			 * Date: 05.02.14
			 * Vitaliy V. Makeev (w.makeev@gmail.com)
			 */

			var settings = require('./settings'),
			    processor = require('./processor'),
			    JSON = require('JSON'),
			    tools = require('./tools');

			/**
			 * Получает текущую задачу
			 * @returns {{name: string, items: Array}}
			 */
			function loadActiveTask() {
			    var taskJson = tools.readFileToString(settings.taskFilePath + '/photoProcessorTask.json');
			    return JSON.parse(taskJson);
			}

			// Закрываем открытые документы
			while (app.documents && app.documents.length > 0) {
			    activeDocument.close(SaveOptions.DONOTSAVECHANGES);
			}

			var task = loadActiveTask();
			processor.processTask(task);
		},
		"photoshop-actions": {
			"crop.js": function (exports, module, require) {
				/**
				 * crop
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var getUnitTypeCharId = require('./tools/getUnitTypeCharId');

				/**
				 * Apply crop;
				 * @param {{ bounds: {
				 *   left: UnitValue,
				 *   top: UnitValue,
				 *   left: UnitValue,
				 *   bottom: UnitValue
				 * } }} data
				 */
				module.exports = function (data) {

				    var idCrop, desc317, idT, desc318, idTop, idPrc, idLeft, idBtom,
				        idRght, idRctn, idAngl, idAng, idDlt,
				        idcropAspectRatioModeKey, idcropAspectRatioModeClass, idunconstrained;

				    idCrop = charIDToTypeID( "Crop" );

				    desc317 = new ActionDescriptor();
				    idT = charIDToTypeID( "T   " );
				    desc318 = new ActionDescriptor();

				    idTop = charIDToTypeID( "Top " );
				    idPrc = charIDToTypeID( getUnitTypeCharId(data.bounds.top) );
				    desc318.putUnitDouble( idTop, idPrc, data.bounds.top.value );

				    idLeft = charIDToTypeID( "Left" );
				    idPrc = charIDToTypeID( getUnitTypeCharId(data.bounds.left) );
				    desc318.putUnitDouble( idLeft, idPrc, data.bounds.left.value );

				    idBtom = charIDToTypeID( "Btom" );
				    idPrc = charIDToTypeID( getUnitTypeCharId(data.bounds.bottom) );
				    desc318.putUnitDouble( idBtom, idPrc, data.bounds.bottom.value );

				    idRght = charIDToTypeID( "Rght" );
				    idPrc = charIDToTypeID( getUnitTypeCharId(data.bounds.right) );
				    desc318.putUnitDouble( idRght, idPrc, data.bounds.right.value );

				    idRctn = charIDToTypeID( "Rctn" );
				    desc317.putObject( idT, idRctn, desc318 );

				    idAngl = charIDToTypeID( "Angl" );
				    idAng = charIDToTypeID( "#Ang" );
				    desc317.putUnitDouble( idAngl, idAng, 0.000000 );
				    idDlt = charIDToTypeID( "Dlt " );
				    desc317.putBoolean( idDlt, false );
				    idcropAspectRatioModeKey = stringIDToTypeID( "cropAspectRatioModeKey" );
				    idcropAspectRatioModeClass = stringIDToTypeID( "cropAspectRatioModeClass" );
				    idunconstrained = stringIDToTypeID( "unconstrained" );
				    desc317.putEnumerated( idcropAspectRatioModeKey, idcropAspectRatioModeClass, idunconstrained );

				    executeAction( idCrop, desc317, DialogModes.NO );

				};
			},
			"gradient.js": function (exports, module, require) {
				/**
				 * fillGradient
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var getUnitTypeCharId = require('./tools/getUnitTypeCharId');

				/**
				 * Apply gradient to active document
				 * @param {{ from: Array, to: Array }} data
				 */
				module.exports = function (data) {
				    var desc64 = new ActionDescriptor(),
				        idGrdn, idFrom;
				    idFrom = charIDToTypeID( "From" );

				    var desc65 = new ActionDescriptor(),
				        idHrzn, idUnt, idVrtc, idPnt, idT;
				    idHrzn = charIDToTypeID( "Hrzn" );
				    idUnt = charIDToTypeID( getUnitTypeCharId(data.from[0]) );
				    desc65.putUnitDouble( idHrzn, idUnt, data.from[0].value );
				    idVrtc = charIDToTypeID( "Vrtc" );
				    idUnt = charIDToTypeID( getUnitTypeCharId(data.from[1]) );
				    desc65.putUnitDouble( idVrtc, idUnt, data.from[1].value );
				    idPnt = charIDToTypeID( "Pnt " );
				    desc64.putObject( idFrom, idPnt, desc65 );
				    idT = charIDToTypeID( "T   " );

				    var desc66 = new ActionDescriptor(),
				        idType, idGrdT, idLnr, idDthr, idUsMs, idGrad;
				    idHrzn = charIDToTypeID( "Hrzn" );
				    idUnt = charIDToTypeID( getUnitTypeCharId(data.to[0]) );
				    desc66.putUnitDouble( idHrzn, idUnt, data.to[0].value );
				    idVrtc = charIDToTypeID( "Vrtc" );
				    idUnt = charIDToTypeID( getUnitTypeCharId(data.to[1]) );
				    desc66.putUnitDouble( idVrtc, idUnt, data.to[1].value );
				    idPnt = charIDToTypeID( "Pnt " );
				    desc64.putObject( idT, idPnt, desc66 );
				    idType = charIDToTypeID( "Type" );
				    idGrdT = charIDToTypeID( "GrdT" );
				    idLnr = charIDToTypeID( "Lnr " );
				    desc64.putEnumerated( idType, idGrdT, idLnr );
				    idDthr = charIDToTypeID( "Dthr" );
				    desc64.putBoolean( idDthr, true );
				    idUsMs = charIDToTypeID( "UsMs" );
				    desc64.putBoolean( idUsMs, true );
				    idGrad = charIDToTypeID( "Grad" );

				    var desc67 = new ActionDescriptor(),
				        idNm, idGrdF, idCstS, idIntr, idClrs, list13;
				    idNm = charIDToTypeID( "Nm  " );
				    desc67.putString( idNm, '$$$/DefaultGradient/ForegroundToTransparent=Foreground to Transparent' );
				    idGrdF = charIDToTypeID( "GrdF" );
				    idGrdF = charIDToTypeID( "GrdF" );
				    idCstS = charIDToTypeID("CstS");
				    desc67.putEnumerated( idGrdF, idGrdF, idCstS );
				    idIntr = charIDToTypeID( "Intr" );
				    desc67.putDouble( idIntr, 4096.000000 );
				    idClrs = charIDToTypeID( "Clrs" );
				    list13 = new ActionList();

				    var desc68 = new ActionDescriptor(),
				        idClry, idFrgC, idLctn, idMdpn, idClrt;
				    idType = charIDToTypeID( "Type" );
				    idClry = charIDToTypeID( "Clry" );
				    idFrgC = charIDToTypeID( "FrgC" );
				    desc68.putEnumerated( idType, idClry, idFrgC );
				    idLctn = charIDToTypeID( "Lctn" );
				    desc68.putInteger( idLctn, 0 );
				    idMdpn = charIDToTypeID( "Mdpn" );
				    desc68.putInteger( idMdpn, 50 );
				    idClrt = charIDToTypeID( "Clrt" );
				    list13.putObject( idClrt, desc68 );

				    var desc69 = new ActionDescriptor(),
				        idTrns, list14;
				    idType = charIDToTypeID( "Type" );
				    idClry = charIDToTypeID( "Clry" );
				    idFrgC = charIDToTypeID( "FrgC" );
				    desc69.putEnumerated( idType, idClry, idFrgC );
				    idLctn = charIDToTypeID( "Lctn" );
				    desc69.putInteger( idLctn, 4096 );
				    idMdpn = charIDToTypeID( "Mdpn" );
				    desc69.putInteger( idMdpn, 50 );
				    idClrt = charIDToTypeID( "Clrt" );
				    list13.putObject( idClrt, desc69 );
				    desc67.putList( idClrs, list13 );
				    idTrns = charIDToTypeID( "Trns" );
				    list14 = new ActionList();

				    var desc70 = new ActionDescriptor(),
				        idOpct, idPrc, idTrnS;
				    idOpct = charIDToTypeID( "Opct" );
				    idPrc = charIDToTypeID( "#Prc" );
				    desc70.putUnitDouble( idOpct, idPrc, 100.000000 );
				    idLctn = charIDToTypeID( "Lctn" );
				    desc70.putInteger( idLctn, 0 );
				    idMdpn = charIDToTypeID( "Mdpn" );
				    desc70.putInteger( idMdpn, 50 );
				    idTrnS = charIDToTypeID( "TrnS" );
				    list14.putObject( idTrnS, desc70 );

				    var desc71 = new ActionDescriptor();
				    idOpct = charIDToTypeID( "Opct" );
				    idPrc = charIDToTypeID( "#Prc" );
				    desc71.putUnitDouble( idOpct, idPrc, 0.000000 );
				    idLctn = charIDToTypeID( "Lctn" );
				    desc71.putInteger( idLctn, 4096 );
				    idMdpn = charIDToTypeID( "Mdpn" );
				    desc71.putInteger( idMdpn, 50 );
				    idTrnS = charIDToTypeID( "TrnS" );
				    list14.putObject( idTrnS, desc71 );
				    desc67.putList( idTrns, list14 );
				    idGrdn = charIDToTypeID( "Grdn" );
				    desc64.putObject( idGrad, idGrdn, desc67 );

				    executeAction( idGrdn, desc64, DialogModes.NO );
				};
			},
			"index.js": function (exports, module, require) {
				/**
				 * index
				 * Date: 06.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				module.exports = {

				    crop: require('./crop'),
				    gradient: require('./gradient'),
				    resizeProportional: require('./resizeProportional')

				};
			},
			"resizeProportional.js": function (exports, module, require) {
				/**
				 * resizeProportional
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				/**
				 * Proportional resize (
				 * @param {{
				 *  newSize: UnitValue,
				 *  direction: Direction
				 * }} resize
				 */
				module.exports = function (resize) {
				    var idImgS, desc456, idDir, idPxl, idscaleStyles, idCnsP, idIntr, idIntp, idbicubicAutomatic;

				    //TODO Добавить масштабирование во всех единицах измерения
				    idImgS = charIDToTypeID( "ImgS" );
				    desc456 = new ActionDescriptor();
				    idDir = charIDToTypeID( resize.direction === Direction.HORIZONTAL ? "Wdth" : "Hght" );
				    idPxl = charIDToTypeID( "#Pxl" );
				    desc456.putUnitDouble( idDir, idPxl, resize.newSize.value );
				    idscaleStyles = stringIDToTypeID( "scaleStyles" );
				    desc456.putBoolean( idscaleStyles, true );
				    idCnsP = charIDToTypeID( "CnsP" );
				    desc456.putBoolean( idCnsP, true );
				    idIntr = charIDToTypeID( "Intr" );
				    idIntp = charIDToTypeID( "Intp" );
				    idbicubicAutomatic = stringIDToTypeID( "bicubicAutomatic" );
				    desc456.putEnumerated( idIntr, idIntp, idbicubicAutomatic );

				    executeAction( idImgS, desc456, DialogModes.NO );
				};
			},
			"tools": {
				"getUnitTypeCharId.js": function (exports, module, require) {
					/**
					 * getUnitTypeCharId
					 * Date: 05.02.14
					 * Vitaliy V. Makeev (w.makeev@gmail.com)
					 */

					module.exports = function (unitType) {
					    switch (unitType.type) {
					        case '%':
					            return '#Prc';
					        case 'px':
					            return '#Pxl';
					        case 'in':
					        case 'cm':
					            return '#Rlt';
					        default:
					            throw 'Тип не поддерживается [' + unitType.type + ']';
					    }
					};
				}
			}
		},
		"processor": {
			"generateCatalogImages.js": function (exports, module, require) {
				/**
				 * generateCatalogImages
				 * Date: 06.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var tools = require('../tools'),
				    savePhotoView = require(('./savePhotoView')),
				    saveMetadataJson = require('./saveMetadataJson');

				var actions = require('../photoshop-actions');

				module.exports = function (photoSet, viewItem, sizes) {

				    //TODO Можно узнать размер в пикселях без изменения размерности линейки?
				    //TODO Нужно ли преобразовывать размерность перед операцией масштабирования?

				    var docRef = activeDocument,
				        oldUnits = preferences.rulerUnits;

				    // Генерируем размеры
				    for (var size_i = 0, sizes_len = viewItem.sizes.length; size_i < sizes_len; size_i++) {
				        var sizeType    = sizes[viewItem.sizes[size_i]],
				            //TODO Реализовано только maxWidth и maxHeight
				            maxWidth    = new UnitValue(sizeType.size.maxWidth),
				            maxHeight   = new UnitValue(sizeType.size.maxHeight);

				        preferences.rulerUnits =
				            tools.getUnitsTypeByAbbreviation(maxWidth.type);

				        var resizeDirection,
				            resizeValue = null,
				            width_k  = docRef.width  / maxWidth,
				            height_k = docRef.height / maxHeight;

				        if (width_k > height_k) {
				            resizeDirection = Direction.HORIZONTAL;
				            if (docRef.width > maxWidth)    resizeValue = maxWidth;
				        } else {
				            resizeDirection = Direction.VERTICAL;
				            if (docRef.height > maxHeight)  resizeValue = maxHeight;
				        }

				        // Сохраняем текущее состояние, чтобы вернуться после изменений
				        var savedState = docRef.activeHistoryState;

				        if (resizeValue) actions.resizeProportional({
				            doc:        docRef,
				            direction:  resizeDirection,
				            newSize:    resizeValue
				        });

				        var savedFile = savePhotoView({
				            doc:      docRef,
				            photoSet: photoSet,
				            view:     viewItem,
				            sizeType: sizeType
				        });

				        saveMetadataJson(savedFile);

				        // Восстанавливаем состояние
				        docRef.activeHistoryState = savedState;

				    } // sizeInfos

				    preferences.rulerUnits = oldUnits;

				};
			},
			"index.js": function (exports, module, require) {
				/**
				 * Processor
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				module.exports = {

				    processTask: require('./processTask')

				};
			},
			"processTask.js": function (exports, module, require) {
				/**
				 * processTask
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var settings = require('../settings'),
				    actions = require('../processor-actions'),
				    generateCatalogImages = require('./generateCatalogImages'),
				    log = require('logger');

				/**
				 * Запускает обработку текущего задания
				 * @param {{
				 *     [defaults]: {
				 *         [applyActions]: Array,
				 *         [sizes]: Array
				 *     },
				 *     photoSets: [
				 *         {
				 *             views: [
				 *                {
				 *                    name: String,
				 *                    path: String,
				 *                    fileName: String
				 *                 }
				 *             ]
				 *         }
				 *     ],
				 *     actions: Object,
				 *     [sizes]: Object
				 * }} task
				 */
				module.exports = function processTask(task) {

				    // process task photosets
				    for (var taskItem_i = 0, taskItems_len = task.photoSets.length; taskItem_i < taskItems_len; taskItem_i++) {
				        var photoSet = task.photoSets[taskItem_i];

				        if (photoSet.skip) continue;

				        // process views in photoset
				        for (var view_j = 0, views_len = photoSet.views.length; view_j < views_len; view_j++) {
				            var viewItem = photoSet.views[view_j];

				            //TODO Нужно формировать путь к файлу более безопасно
				            var fileRef = new File(settings.basePath + '/' + viewItem.path + '/' + viewItem.fileName);
				            var docRef = app.open(fileRef);

				            var applyActions = viewItem.applyActions || task.defaults.applyActions; //TODO applyActions !== undefined

				            for (var action_i = 0, actions_len = applyActions.length; action_i < actions_len; action_i++) {
				                var actionInfo = task.actions[applyActions[action_i]];
				                //actionInfo.doc = docRef;
				                log.debug('Действие - ' + actionInfo.action);
				                actions[actionInfo.action](actionInfo);
				            } // actions

				            // defaults sizes
				            viewItem.sizes = viewItem.sizes || task.defaults.sizes;
				            generateCatalogImages(photoSet, viewItem, task.sizes);

				            docRef.close(SaveOptions.DONOTSAVECHANGES);

				        } // viewItems

				    } // taskItems

				};
			},
			"saveMetadataJson.js": function (exports, module, require) {
				/**
				 * saveMetadataJson
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var tools = require('../tools'),
				    JSON = require('JSON');

				module.exports = function (photoFile) {

				    var frame = tools.calculateFrame(Units.PERCENT);

				    var bounds = '[' + [
				        frame.left.value   / 100,
				        frame.top.value    / 100,
				        frame.right.value  / 100 - 1,
				        frame.bottom.value / 100 - 1
				    ].join() + ']';

				    var oldUnits = preferences.rulerUnits;
				    preferences.rulerUnits = Units.PIXELS;

				    var metadataJson = {
				        ImageDescription: {
				            viewBounds: bounds,
				            baseBounds: bounds,
				            baseBoundsDefined: true,
				            width: activeDocument.width.value,
				            height: activeDocument.height.value
				        }
				    };

				    preferences.rulerUnits = oldUnits;

				    var file = new File(photoFile.fsName.slice(0, -5) + '.jsn');
				    if (file.open('w')) {
				        file.write(JSON.stringify(metadataJson));
				        file.close();
				    }
				};
			},
			"savePhotoView.js": function (exports, module, require) {
				/**
				 * savePhotoView
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var settings = require('../settings');

				/**
				 * Сохраняет текущее фото
				 * @param {{
				 *  doc: Object,
				 *  item: Object,
				 *  view: Object
				 * }} data
				 * @return file
				 */
				module.exports = function (data) {
				    var doc      = data.doc,
				        photoSet = data.photoSet,
				        view     = data.view,
				        sizeType = data.sizeType;

				    //TODO Формировать имя файла согласно настройкам (нужно подключать шаблонизатор)
				    // /front-base.jpg
				    var fileName = [view.name, 'base'].join('-') + '.jpeg';

				    // Полный путь к файлу
				    // [path]/4955
				    var imgFolder = new Folder([settings.productPhotosPath, photoSet.code].join('/'));

				    var file = new File([imgFolder.fsName, fileName].join('/'));

				    if (!imgFolder.exist) imgFolder.create();
				    // folder.changePath('../');

				    //TODO Пока реализовно сохранение только в JPEG
				    var jpgSaveOptions = new JPEGSaveOptions();
				    jpgSaveOptions.embedColorProfile = false;
				    jpgSaveOptions.formatOptions = FormatOptions.OPTIMIZEDBASELINE;
				    jpgSaveOptions.matte = MatteType.WHITE;
				    jpgSaveOptions.quality = sizeType.file.quality || 8;

				    //$.writeln(file.fsName);
				    doc.saveAs(file, jpgSaveOptions, true, Extension.LOWERCASE);

				    return file;
				};
			}
		},
		"processor-actions": {
			"cropFrameAroundObject.js": function (exports, module, require) {
				/**
				 * cropFrameAroundObject
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var cropAction = require('../photoshop-actions').crop,
				    tools = require('../tools');

				/**
				 * Создает рамку вокруг объекта съемки
				 * @param actionInfo
				 */
				module.exports = function (actionInfo) {

				    var frame           = tools.calculateFrame(),
				        zeroUnitValue   = '0 ' + tools.getRulerTypeAbbreviation(),
				        zeroUnit        = UnitValue(zeroUnitValue);

				    var cropData = {
				        bounds: {

				            left:   frame.left   != zeroUnit ?
				                frame.left   - UnitValue(actionInfo.size.left   || zeroUnitValue) : frame.left,

				            top:    frame.top    != zeroUnit ?
				                frame.top    - UnitValue(actionInfo.size.top    || zeroUnitValue) : frame.top,

				            right:  frame.right  != activeDocument.width ?
				                frame.right  + UnitValue(actionInfo.size.right  || zeroUnitValue) : frame.right,

				            bottom: frame.bottom != activeDocument.height ?
				                frame.bottom + UnitValue(actionInfo.size.bottom || zeroUnitValue) : frame.bottom

				        }
				    };

				    cropAction(cropData);

				    return true;
				};
			},
			"index.js": function (exports, module, require) {
				/**
				 * actions
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				// TODO Загружать в дальнейшем функции из отдельного файла

				module.exports = {

				    cropFrameAroundObject: require('./cropFrameAroundObject'),

				    softFrameAroundObject: require('./softFrameAroundObject'),

				    setForegroundColor: require('./setForegroundColor'),

				    test: function () {
				        $.writeln ('1234');
				    }

				};
			},
			"setForegroundColor.js": function (exports, module, require) {
				/**
				 * setForegroundColor
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */


				module.exports = function (actionInfo) {

				    var solidColorRef = new SolidColor();

				    //TODO Добавить hexValue
				    // solidColorRef.rgb.hexValue = actionInfo.RGB;

				    solidColorRef.rgb.red   = actionInfo.color[0];
				    solidColorRef.rgb.green = actionInfo.color[1];
				    solidColorRef.rgb.blue  = actionInfo.color[2];

				    app.foregroundColor = solidColorRef;

				    return true;
				};



				/*var idsetd, desc123, idnull, ref8, idClr, idFrgC, idT, desc124,
				 idRd, idGrn, idBl, idRGBC, idSrce;

				 idsetd = charIDToTypeID("setd");
				 desc123 = new ActionDescriptor();
				 idnull = charIDToTypeID("null");
				 ref8 = new ActionReference();
				 idClr = charIDToTypeID("Clr ");
				 idFrgC = charIDToTypeID("FrgC");
				 ref8.putProperty(idClr, idFrgC);
				 desc123.putReference(idnull, ref8);
				 idT = charIDToTypeID("T   ");
				 desc124 = new ActionDescriptor();
				 idRd = charIDToTypeID("Rd  ");
				 desc124.putDouble(idRd, color.RGB[0]);
				 idGrn = charIDToTypeID("Grn ");
				 desc124.putDouble(idGrn, color.RGB[1]);
				 idBl = charIDToTypeID("Bl  ");
				 desc124.putDouble(idBl, color.RGB[2]);
				 idRGBC = charIDToTypeID("RGBC");
				 desc123.putObject(idT, idRGBC, desc124);
				 idSrce = charIDToTypeID("Srce");
				 desc123.putString(idSrce, "photoshopPicker");

				 executeAction(idsetd, desc123, DialogModes.NO);*/
			},
			"softFrameAroundObject.js": function (exports, module, require) {
				/**
				 * softFrameAroundObject
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var tools = require('../tools'),
				    gradientAction = require('../photoshop-actions').gradient,
				    getUnitsTypeByAbbreviation = require('../tools').getUnitsTypeByAbbreviation;

				/**
				 * Накладывает градиент от 0% до 100% прозрачности
				 * @param actionInfo
				 */
				module.exports = function (actionInfo) {

				    var defaultFrameSize,
				        frame               = tools.calculateFrame(),
				        zeroUnit            = new UnitValue(0, tools.getRulerTypeAbbreviation()),
				        curFrame,
				        oldUnits = preferences.rulerUnits;

				    defaultFrameSize = actionInfo.defaultSize ?
				        UnitValue(actionInfo.defaultSize) :
				        null;

				    if (defaultFrameSize)
				        preferences.rulerUnits = getUnitsTypeByAbbreviation(defaultFrameSize.type);

				    // left gradient
				    curFrame = frame.left != zeroUnit ? frame.left : defaultFrameSize;
				    if (curFrame)
				        gradientAction({
				            from: [zeroUnit, zeroUnit],
				            to:   [curFrame, zeroUnit]
				        });

				    // top gradient
				    curFrame = frame.top != zeroUnit ? frame.top : defaultFrameSize;
				    if (curFrame)
				        gradientAction({
				            from: [zeroUnit, zeroUnit],
				            to:   [zeroUnit, curFrame]
				        });

				    // right gradient
				    curFrame = frame.right != zeroUnit ?
				        frame.right : defaultFrameSize ? activeDocument.width - defaultFrameSize : null;
				    if (curFrame)
				        gradientAction({
				            from: [activeDocument.width, zeroUnit],
				            to:   [curFrame, zeroUnit]
				        });

				    // bottom gradient
				    curFrame = frame.bottom != zeroUnit ?
				        frame.bottom : defaultFrameSize ? activeDocument.width - defaultFrameSize : null;
				    if (curFrame)
				        gradientAction({
				            from: [zeroUnit, activeDocument.height],
				            to:   [zeroUnit, curFrame]
				        });

				    if (defaultFrameSize) {
				        preferences.rulerUnits = oldUnits;
				    }
				};
			}
		},
		"settings.json": function (exports, module, require) {
			module.exports = {
			    "basePath": "/Users/mvv/Pictures",
			    "productPhotosPath": "/Users/mvv/Dropbox/_Share_VensiFoto/ProductImages",
			    "taskFilePath": "/Users/mvv/Google Диск/Офис/Photosessions/PhotoshopTasks"
			};
		},
		"tools": {
			"calculateFrame.js": function (exports, module, require) {
				/**
				 * calculateFrame
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var getRulerTypeAbbreviation = require('./getRulerTypeAbbreviation'),
				    getUnitsTypeByAbbreviation = require('./getUnitsTypeByAbbreviation');

				/**
				 * Возвращает координаты (UnitValue) самых крайних направляющих.
				 * Если направляющая не указана, то берутся границы кадра.
				 * Горизонтальная направляющая может быть одна, в этом случае, она считается нижней.
				 * @returns {{left: UnitValue, right: UnitValue, top: UnitValue, bottom: UnitValue}}
				 */
				module.exports = function (units) {
				    var oldUnits = preferences.rulerUnits;
				        docRef = activeDocument;

				    if (units) {
				        var u = (units + '').split('.');
				        if (u.length == 2 && u[1] in Units) {
				            preferences.rulerUnits = units;
				        } else if (typeof units === 'string') {
				            preferences.rulerUnits = getUnitsTypeByAbbreviation(UnitValue(units).type);
				        } else {
				            throw 'calculateFrame: not supported [units] argument format'
				        }
				    }

				    var guides = activeDocument.guides,
				        zeroUnit = UnitValue('0 ' + getRulerTypeAbbreviation()),
				        vrtGuides = [],
				        hrzGuides = [];

				    // Разделяем направляющие по типу
				    for (var i = 0, len = guides.length; i < len; i++) {
				        var guid = guides[i];
				        guid.direction == 'Direction.VERTICAL' ?
				            vrtGuides.push(guid) :
				            hrzGuides.push(guid);
				    }
				    var guidesComparer = function (a, b) {
				        return a.coordinate.as('px') - b.coordinate.as('px');
				    };
				    vrtGuides.sort(guidesComparer);
				    hrzGuides.sort(guidesComparer);

				    // Рамка по умолчанию соответствует границам документа
				    var frame = {
				        left:   zeroUnit,
				        right:  docRef.width,
				        top:    zeroUnit,
				        bottom: docRef.height
				    };

				    // Обязательное наличие двух вертикальных направляющих для задания по ним рамки
				    if (vrtGuides.length > 1) {
				        frame.left =  vrtGuides[0].coordinate;
				        frame.right = vrtGuides[vrtGuides.length - 1].coordinate;
				    }

				    // Горизонтальная направляющая может быть одна (нижняя)
				    if (hrzGuides.length > 0) {
				        frame.bottom =  hrzGuides[hrzGuides.length - 1].coordinate;
				        if (hrzGuides.length > 1) {
				            frame.top = hrzGuides[0].coordinate;
				        }
				    }

				    if (units) {
				        preferences.rulerUnits = oldUnits;
				    }

				    return frame;
				};
			},
			"getAbbreviationByUnitsType.js": function (exports, module, require) {
				/**
				 * getAbbreviationByUnitsType
				 * Date: 07.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				module.exports = function (UnitsType) {
				    switch (UnitsType) {
				        case Units.CM:
				            return 'cm';
				        case Units.INCHES:
				            return 'in';
				        case Units.MM:
				            return 'mm';
				        case Units.PERCENT:
				            return '%';
				        case Units.PICAS:
				            return 'pc';
				        case Units.PIXELS:
				            return 'px';
				        case Units.POINTS:
				            return 'pt';
				        default:
				            throw 'Тип не поддерживается [' + preferences.rulerUnits + ']';
				    }
				};
			},
			"getRulerTypeAbbreviation.js": function (exports, module, require) {
				/**
				 * getRulerTypeAbbreviation
				 * Date: 07.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				var getAbbreviationByUnitsType = require('./getAbbreviationByUnitsType');

				module.exports = function () {
				    return getAbbreviationByUnitsType(preferences.rulerUnits);
				};
			},
			"getUnitsTypeByAbbreviation.js": function (exports, module, require) {
				/**
				 * getUnitsTypeByAbbreviation
				 * Date: 07.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				//TODO Может быть есть встроенный метод для этой цели?
				module.exports = function (abbreviation) {
				    switch (abbreviation) {
				        case 'cm':
				            return Units.CM;
				        case 'in':
				            return Units.INCHES;
				        case 'mm':
				            return Units.MM;
				        case '%':
				            return Units.PERCENT;
				        case 'pc':
				            return Units.PICAS;
				        case 'px':
				            return Units.PIXELS;
				        case 'pt':
				            return Units.POINTS;
				        default:
				            throw 'Аббревиатура не определена [' + abbreviation + ']';
				    }
				};
			},
			"index.js": function (exports, module, require) {
				/**
				 * Tools
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				module.exports = {

				    readFileToString: require('./readFileToString'),

				    getUnitTypeCharId: require('../photoshop-actions/tools/getUnitTypeCharId'),

				    calculateFrame: require('./calculateFrame'),

				    getRulerTypeAbbreviation: require('./getRulerTypeAbbreviation'),

				    getAbbreviationByUnitsType: require('./getAbbreviationByUnitsType'),

				    getUnitsTypeByAbbreviation: require('./getUnitsTypeByAbbreviation')

				};
			},
			"readFileToString.js": function (exports, module, require) {
				/**
				 * readFileToString
				 * Date: 05.02.14
				 * Vitaliy V. Makeev (w.makeev@gmail.com)
				 */

				/**
				 * Читает файл по указанному пути
				 */
				module.exports = function (filePath) {

				    var file = new File(filePath);

				    if (file.open('r')) {
				        var data = file.read();
				        file.close();
				        return data;
				    } else {
				        return null;
				    }

				};

			}
		}
	}
})("src/main");
